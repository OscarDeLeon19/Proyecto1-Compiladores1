
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package reporte.ciclo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import reporte.analisis.lexico.LexerReporte;
import reporte.DatosReporte;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorCiclo extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorCiclo() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorCiclo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorCiclo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\022\002\000\002\002" +
    "\006\000\002\003\005\000\002\003\002\000\002\020\004" +
    "\000\002\020\004\000\002\020\002\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\017\007\000\002\017\007\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\002\000\002" +
    "\023\002\000\002\005\012\000\002\024\002\000\002\006" +
    "\012\000\002\007\004\000\002\007\004\000\002\007\002" +
    "\000\002\010\011\000\002\011\011\000\002\012\011\000" +
    "\002\012\011\000\002\013\005\000\002\013\005\000\002" +
    "\013\010\000\002\013\012\000\002\013\005\000\002\013" +
    "\010\000\002\013\012\000\002\013\012\000\002\013\012" +
    "\000\002\013\005\000\002\013\010\000\002\013\012\000" +
    "\002\013\012\000\002\013\012\000\002\013\005\000\002" +
    "\013\010\000\002\013\012\000\002\015\003\000\002\015" +
    "\003\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\004\000" +
    "\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\004\005\001\002\000\004\002\213\001" +
    "\002\000\010\002\uffdc\004\uffdc\033\uffdc\001\002\000\010" +
    "\002\000\004\000\033\010\001\002\000\012\002\uffdd\004" +
    "\uffdd\033\uffdd\036\uffdd\001\002\000\012\017\020\020\017" +
    "\021\021\022\022\001\002\000\012\002\uffdf\004\uffdf\033" +
    "\uffdf\036\uffdf\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\012\002\uffde\004\uffde\033\uffde\036\uffde\001\002\000" +
    "\006\002\uffff\004\015\001\002\000\010\002\uffdc\004\uffdc" +
    "\033\uffdc\001\002\000\010\002\ufffe\004\ufffe\033\010\001" +
    "\002\000\004\037\206\001\002\000\004\037\201\001\002" +
    "\000\004\037\173\001\002\000\004\037\023\001\002\000" +
    "\006\033\uffd9\036\uffd9\001\002\000\006\033\uffd5\036\uffd5" +
    "\001\002\000\006\033\026\036\027\001\002\000\006\023" +
    "\034\024\035\001\002\000\004\022\032\001\002\000\006" +
    "\033\uffd7\036\uffd7\001\002\000\006\033\uffd6\036\uffd6\001" +
    "\002\000\004\037\033\001\002\000\012\002\uffd8\004\uffd8" +
    "\033\uffd8\036\uffd8\001\002\000\004\037\166\001\002\000" +
    "\004\037\036\001\002\000\070\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\052\ufffa\054\ufffa\001\002\000\070" +
    "\005\050\006\063\007\054\010\043\011\056\012\057\013" +
    "\053\014\075\015\060\016\061\027\045\030\074\031\041" +
    "\032\044\033\046\034\065\036\040\040\072\041\071\042" +
    "\052\043\055\044\064\046\066\047\042\050\073\052\051" +
    "\054\070\001\002\000\004\024\164\001\002\000\070\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\046\ufff5\047\ufff5\050\ufff5\052\ufff5\054" +
    "\ufff5\001\002\000\004\034\114\001\002\000\070\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed" +
    "\001\002\000\070\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\052\ufff4\054\ufff4\001\002\000\070\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7\054\ufff7\001" +
    "\002\000\004\025\112\001\002\000\070\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\052\ufffb\054\ufffb\001\002" +
    "\000\070\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\052\ufff0\054\ufff0\001\002\000\070\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\052\ufff9\054\ufff9\001\002\000" +
    "\070\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\036\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\052" +
    "\ufff3\054\ufff3\001\002\000\070\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\036\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\046" +
    "\uffea\047\uffea\050\uffea\052\uffea\054\uffea\001\002\000\070" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\036\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\044\uffee\046\uffee\047\uffee\050\uffee\052\uffee" +
    "\054\uffee\001\002\000\070\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\036" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\052\ufff2\054\ufff2\001\002\000\070\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\036\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\046\uffec\047\uffec\050\uffec\052\uffec\054" +
    "\uffec\001\002\000\070\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\052\uffeb\054\uffeb\001\002\000\070\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\054\uffe8" +
    "\001\002\000\070\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\052\uffe7\054\uffe7\001\002\000\070\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\046\ufffc\047\ufffc\050\ufffc\052\ufffc\054\ufffc\001" +
    "\002\000\070\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\036\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\047\uffef\050" +
    "\uffef\052\uffef\054\uffef\001\002\000\070\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6\001\002" +
    "\000\010\030\076\034\065\054\070\001\002\000\070\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054" +
    "\ufff1\001\002\000\070\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\027" +
    "\102\030\100\031\101\032\103\033\ufff8\034\ufff8\036\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\052\ufff8\054\ufff8\001\002\000\072\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd" +
    "\054\uffbd\001\002\000\070\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\052\uffe3\054\uffe3\001\002\000\070\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\054" +
    "\uffe4\001\002\000\070\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\052\uffe5\054\uffe5\001\002\000\070\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\052\ufff6\054\ufff6" +
    "\001\002\000\070\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\052\uffe9\054\uffe9\001\002\000\010\030\076\034" +
    "\065\054\070\001\002\000\072\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\027\uffb8\030\uffb8\031\101\032\103\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\054\uffb8\001\002" +
    "\000\010\030\076\034\065\054\070\001\002\000\010\030" +
    "\076\034\065\054\070\001\002\000\010\030\076\034\065" +
    "\054\070\001\002\000\010\030\076\034\065\054\070\001" +
    "\002\000\072\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\052\uffb9\054\uffb9\001\002\000\072\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\027\uffbc\030\uffbc\031\101\032\103" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc" +
    "\054\uffbc\001\002\000\072\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\046\uffba\047\uffba\050\uffba\052\uffba\054\uffba\001\002\000" +
    "\072\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\027\uffbb\030\uffbb\031" +
    "\101\032\103\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\052\uffbb\054\uffbb\001\002\000\014\027\102\030\100" +
    "\031\101\032\103\035\111\001\002\000\072\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\054" +
    "\uffb7\001\002\000\004\037\113\001\002\000\070\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2" +
    "\001\002\000\006\050\117\052\115\001\002\000\004\035" +
    "\162\001\002\000\004\035\160\001\002\000\004\045\120" +
    "\001\002\000\014\005\123\006\121\007\122\010\125\011" +
    "\124\001\002\000\006\035\uffcf\040\153\001\002\000\006" +
    "\035\uffcc\040\144\001\002\000\004\035\uffd0\001\002\000" +
    "\006\035\uffc2\040\137\001\002\000\006\035\uffc7\040\126" +
    "\001\002\000\006\052\127\054\131\001\002\000\004\041" +
    "\uffbf\001\002\000\004\041\132\001\002\000\004\041\uffbe" +
    "\001\002\000\006\035\uffc6\045\133\001\002\000\010\012" +
    "\135\013\136\015\134\001\002\000\004\035\uffc3\001\002" +
    "\000\004\035\uffc5\001\002\000\004\035\uffc4\001\002\000" +
    "\006\052\127\054\131\001\002\000\004\041\141\001\002" +
    "\000\006\035\uffc1\045\142\001\002\000\004\016\143\001" +
    "\002\000\004\035\uffc0\001\002\000\006\052\127\054\131" +
    "\001\002\000\004\041\146\001\002\000\006\035\uffcb\045" +
    "\147\001\002\000\010\012\151\013\152\014\150\001\002" +
    "\000\004\035\uffc8\001\002\000\004\035\uffca\001\002\000" +
    "\004\035\uffc9\001\002\000\006\052\127\054\131\001\002" +
    "\000\004\041\155\001\002\000\006\035\uffce\045\156\001" +
    "\002\000\004\012\157\001\002\000\004\035\uffcd\001\002" +
    "\000\004\047\161\001\002\000\070\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\001\002\000" +
    "\004\047\163\001\002\000\070\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1\001\002\000\004" +
    "\037\165\001\002\000\006\033\uffd4\036\uffd4\001\002\000" +
    "\070\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa\052" +
    "\ufffa\054\ufffa\001\002\000\070\005\050\006\063\007\054" +
    "\010\043\011\056\012\057\013\053\014\075\015\060\016" +
    "\061\027\045\030\074\031\041\032\044\033\046\034\065" +
    "\036\170\040\072\041\071\042\052\043\055\044\064\046" +
    "\066\047\042\050\073\052\051\054\070\001\002\000\004" +
    "\023\171\001\002\000\004\037\172\001\002\000\006\033" +
    "\uffd3\036\uffd3\001\002\000\006\033\uffdb\036\uffdb\001\002" +
    "\000\006\033\uffdc\036\uffdc\001\002\000\006\033\010\036" +
    "\176\001\002\000\004\021\177\001\002\000\004\037\200" +
    "\001\002\000\012\002\uffda\004\uffda\033\uffda\036\uffda\001" +
    "\002\000\070\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\052\ufffa\054\ufffa\001\002\000\070\005\050\006\063" +
    "\007\054\010\043\011\056\012\057\013\053\014\075\015" +
    "\060\016\061\027\045\030\074\031\041\032\044\033\046" +
    "\034\065\036\203\040\072\041\071\042\052\043\055\044" +
    "\064\046\066\047\042\050\073\052\051\054\070\001\002" +
    "\000\004\017\204\001\002\000\004\037\205\001\002\000" +
    "\012\002\uffd2\004\uffd2\033\uffd2\036\uffd2\001\002\000\070" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\036\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa" +
    "\054\ufffa\001\002\000\070\005\050\006\063\007\054\010" +
    "\043\011\056\012\057\013\053\014\075\015\060\016\061" +
    "\027\045\030\074\031\041\032\044\033\046\034\065\036" +
    "\210\040\072\041\071\042\052\043\055\044\064\046\066" +
    "\047\042\050\073\052\051\054\070\001\002\000\004\020" +
    "\211\001\002\000\004\037\212\001\002\000\012\002\uffd1" +
    "\004\uffd1\033\uffd1\036\uffd1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\012\005\012\006\006\012\010" +
    "\022\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\015\001\001\000\010\005" +
    "\012\006\006\012\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\023\001\001\000\004\007\024\001\001\000\006\010\027" +
    "\011\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\036\001\001\000\010\014\066\017\046\021\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\076\001\001\000\002\001\001\000\004\014\076\001\001" +
    "\000\002\001\001\000\004\014\106\001\001\000\004\014" +
    "\105\001\001\000\004\014\104\001\001\000\004\014\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\166\001\001\000\010\014" +
    "\066\017\046\021\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\173\001\001\000" +
    "\004\004\174\001\001\000\010\005\012\006\006\012\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\201\001\001\000\010\014\066\017\046" +
    "\021\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\206\001\001\000\010\014\066" +
    "\017\046\021\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorCiclo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorCiclo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorCiclo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<String> errores = new ArrayList<>();
    private DatosReporte dtsRep;
    private String nuevaCadena = "";
    private int etiquetas = 0;
    private String ultimoID = "";
    private String cadena_h1 = "";
    private String etiquetaValor = "";

    public void setDtsRep(DatosReporte dtsRep) {
        this.dtsRep = dtsRep;
    }

    public AnalizadorCiclo(LexerCiclo lexer) {
            super(lexer);
    }

    public void setErrores(ArrayList<String> errores) {
        this.errores = errores;
    }
  
    public void syntax_error(Symbol s) {
        errores.add("Error Sintactico Ciclo: Lexema: " + String.valueOf(s.value) + " | Linea: " +  s.left + " | columna: " +  s.right);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorCiclo$actions {
  private final AnalizadorCiclo parser;

  /** Constructor */
  CUP$AnalizadorCiclo$actions(AnalizadorCiclo parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorCiclo$do_action_part00000000(
    int                        CUP$AnalizadorCiclo$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorCiclo$parser,
    java.util.Stack            CUP$AnalizadorCiclo$stack,
    int                        CUP$AnalizadorCiclo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorCiclo$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorCiclo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorCiclo$parser.done_parsing();
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
dtsRep.aumentarID();
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= INICIO body NT$0 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s1 ::= s1 INICIO body 
            {
              Object RESULT =null;
		dtsRep.aumentarID();
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_html ::= variable_html identificador_h1 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = cad; cadena_h1 = cadena_h1 + " " + cad; etiquetaValor = etiquetaValor + "" + cad;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_html",14, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_html ::= variable_html variable_h1 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = var; cadena_h1 = cadena_h1 + " " + var;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_html",14, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_html ::= 
            {
              String RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_html",14, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identificador_h1 ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = id;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identificador_h1 ::= expresion_string 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identificador_h1 ::= SUMA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identificador_h1 ::= RESTA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identificador_h1 ::= MULTIPLICACION 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identificador_h1 ::= DIVISION 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identificador_h1 ::= DOS_PUNTOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identificador_h1 ::= COMA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identificador_h1 ::= PUNTO_COMA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identificador_h1 ::= SCORE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identificador_h1 ::= CLASES 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identificador_h1 ::= VARIABLES 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // identificador_h1 ::= METODOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // identificador_h1 ::= COMENTARIOS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // identificador_h1 ::= NOMBRE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // identificador_h1 ::= TIPO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identificador_h1 ::= FUNCION 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identificador_h1 ::= PARAMETROS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // identificador_h1 ::= TEXTO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // identificador_h1 ::= SIGNO_IGUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identificador_h1 ::= RESULT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // identificador_h1 ::= CORCHETE_A 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identificador_h1 ::= CORCHETE_C 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identificador_h1 ::= ETIQUETA_ABRIR BR ETIQUETA_CERRAR 
            {
              String RESULT =null;
		RESULT = "<br>";
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("identificador_h1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variable_h1 ::= DOLAR PARENTESIS_A ID PARENTESIS_C DOLAR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		RESULT = String.valueOf(dtsRep.obtenerID(id, idleft)); etiquetaValor = etiquetaValor + " " + id; dtsRep.setEtiquetaValor(id); 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_h1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable_h1 ::= DOLAR PARENTESIS_A var_jison PARENTESIS_C DOLAR 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		RESULT = String.valueOf(var);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_h1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // body ::= body etiqueta_h 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // body ::= body etiqueta_table 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body ::= body columna 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
dtsRep.agregarEtiqueta("<table>");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiqueta_table ::= ETIQUETA_ABRIR TABLE ETIQUETA_CERRAR NT$1 body ETIQUETA_FIN TABLE ETIQUETA_CERRAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-4)).value;
		dtsRep.agregarEtiqueta("</table>");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("etiqueta_table",3, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$2 ::= 
            {
              Object RESULT =null;
dtsRep.agregarEtiqueta("<tr>");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("NT$2",18, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // columna ::= ETIQUETA_ABRIR TR ETIQUETA_CERRAR NT$2 fila ETIQUETA_FIN TR ETIQUETA_CERRAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-4)).value;
		dtsRep.agregarEtiqueta("</tr>");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("columna",4, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fila ::= fila fila_th 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fila ::= fila fila_td 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fila ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fila_th ::= ETIQUETA_ABRIR TH ETIQUETA_CERRAR variable_html ETIQUETA_FIN TH ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.setEtiquetaValor(etiquetaValor); etiquetaValor = ""; dtsRep.agregarFilaTH(cadena_h1); cadena_h1 = "";
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila_th",6, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fila_td ::= ETIQUETA_ABRIR TD ETIQUETA_CERRAR variable_html ETIQUETA_FIN TD ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.setEtiquetaValor(etiquetaValor); etiquetaValor = ""; dtsRep.agregarFilaTD(cadena_h1); cadena_h1 = "";
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila_td",7, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiqueta_h ::= ETIQUETA_ABRIR H1 ETIQUETA_CERRAR variable_html ETIQUETA_FIN H1 ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.setEtiquetaValor(etiquetaValor); etiquetaValor = ""; dtsRep.agregarH1(cadena_h1); cadena_h1 = "";
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("etiqueta_h",8, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiqueta_h ::= ETIQUETA_ABRIR H2 ETIQUETA_CERRAR variable_html ETIQUETA_FIN H2 ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.setEtiquetaValor(etiquetaValor); etiquetaValor = ""; dtsRep.agregarH2(cadena_h1); cadena_h1 = "";
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("etiqueta_h",8, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_jison ::= RESULT PUNTO SCORE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = dtsRep.obtenerValorJISON("Score", 0, "score", valleft); dtsRep.setEtiquetaValor("RESULT.Score");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_jison ::= RESULT PUNTO CLASES 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_jison ::= RESULT PUNTO CLASES CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Clases", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_jison ::= RESULT PUNTO CLASES CORCHETE_A valor CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Clases", val, "Nombre", valleft); dtsRep.setEtiquetaValor("RESULT.Clases[" + ultimoID +"].Nombre");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_jison ::= RESULT PUNTO VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, "Nombre", valleft); dtsRep.setEtiquetaValor("RESULT.Variables[" + ultimoID +"].Nombre");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, "Tipo", valleft); dtsRep.setEtiquetaValor("RESULT.Variables[" + ultimoID +"].Tipo");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C PUNTO FUNCION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, "Funcion", valleft); dtsRep.setEtiquetaValor("RESULT.Variables[" + ultimoID +"].Funcion");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var_jison ::= RESULT PUNTO METODOS 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, "Nombre", valleft); dtsRep.setEtiquetaValor("RESULT.Metodos[" + ultimoID +"].Nombre");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, "Tipo", valleft); dtsRep.setEtiquetaValor("RESULT.Metodos[" + ultimoID +"].Tipo");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C PUNTO PARAMETROS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, "Parametros", valleft); dtsRep.setEtiquetaValor("RESULT.Metodos[" + ultimoID +"].Parametros");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_jison ::= RESULT PUNTO COMENTARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_jison ::= RESULT PUNTO COMENTARIOS CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Comentarios", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_jison ::= RESULT PUNTO COMENTARIOS CORCHETE_A valor CORCHETE_C PUNTO TEXTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Comentarios", val, "Texto", valleft); dtsRep.setEtiquetaValor("RESULT.Comentarios[" + ultimoID +"].Texto");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valor ::= ID 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		try{ RESULT = Integer.parseInt(dtsRep.obtenerID(e, eleft)); ultimoID = e;}catch(Exception ex){errores.add("Error al obtener valor de ID: "+ e +" en Linea: " + eleft); RESULT = 0;}
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor ::= ENTERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = e; ultimoID = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_string ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_string ::= expresion_string SUMA expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_string ::= expresion_string RESTA expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_string ::= expresion_string MULTIPLICACION expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_string ::= expresion_string DIVISION expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 / e2;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_string ::= RESTA expresion_string 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = 0 - e;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_string ::= PARENTESIS_A expresion_string PARENTESIS_C 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = e;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorCiclo$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorCiclo$do_action(
    int                        CUP$AnalizadorCiclo$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorCiclo$parser,
    java.util.Stack            CUP$AnalizadorCiclo$stack,
    int                        CUP$AnalizadorCiclo$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorCiclo$do_action_part00000000(
                               CUP$AnalizadorCiclo$act_num,
                               CUP$AnalizadorCiclo$parser,
                               CUP$AnalizadorCiclo$stack,
                               CUP$AnalizadorCiclo$top);
    }
}

}
