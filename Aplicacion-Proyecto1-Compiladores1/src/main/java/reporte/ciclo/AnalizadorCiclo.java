
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package reporte.ciclo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import reporte.analisis.lexico.LexerReporte;
import reporte.DatosReporte;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorCiclo extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorCiclo() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorCiclo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorCiclo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\020\002\000\002\002" +
    "\006\000\002\003\005\000\002\003\002\000\002\017\003" +
    "\000\002\017\003\000\002\017\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\002\000\002" +
    "\004\004\000\002\021\002\000\002\005\012\000\002\022" +
    "\002\000\002\006\012\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\010\011\000\002\011\011\000" +
    "\002\012\011\000\002\012\011\000\002\013\005\000\002" +
    "\013\005\000\002\013\010\000\002\013\012\000\002\013" +
    "\005\000\002\013\010\000\002\013\012\000\002\013\012" +
    "\000\002\013\012\000\002\013\005\000\002\013\010\000" +
    "\002\013\012\000\002\013\012\000\002\013\012\000\002" +
    "\013\005\000\002\013\010\000\002\013\012\000\002\015" +
    "\003\000\002\015\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\002\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\004\000\002\014" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\004\005\001\002\000\004\002\162\001" +
    "\002\000\012\002\ufff6\003\007\004\ufff6\033\ufff6\001\002" +
    "\000\010\002\000\004\000\033\012\001\002\000\004\037" +
    "\010\001\002\000\012\002\ufff5\004\ufff5\033\ufff5\036\ufff5" +
    "\001\002\000\012\002\ufff7\004\ufff7\033\ufff7\036\ufff7\001" +
    "\002\000\012\017\022\020\021\021\023\022\024\001\002" +
    "\000\012\002\ufff9\004\ufff9\033\ufff9\036\ufff9\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\012\002\ufff8\004\ufff8" +
    "\033\ufff8\036\ufff8\001\002\000\006\002\uffff\004\017\001" +
    "\002\000\012\002\ufff6\003\007\004\ufff6\033\ufff6\001\002" +
    "\000\010\002\ufffe\004\ufffe\033\012\001\002\000\004\037" +
    "\155\001\002\000\004\037\150\001\002\000\004\037\142" +
    "\001\002\000\004\037\025\001\002\000\006\033\ufff2\036" +
    "\ufff2\001\002\000\006\033\uffee\036\uffee\001\002\000\006" +
    "\033\030\036\031\001\002\000\006\023\036\024\037\001" +
    "\002\000\004\022\034\001\002\000\006\033\ufff0\036\ufff0" +
    "\001\002\000\006\033\uffef\036\uffef\001\002\000\004\037" +
    "\035\001\002\000\012\002\ufff1\004\ufff1\033\ufff1\036\ufff1" +
    "\001\002\000\004\037\135\001\002\000\004\037\040\001" +
    "\002\000\010\043\045\045\041\046\044\001\002\000\004" +
    "\036\ufffc\001\002\000\004\036\ufffb\001\002\000\004\036" +
    "\132\001\002\000\006\027\uffd2\036\uffd2\001\002\000\004" +
    "\042\046\001\002\000\014\005\051\006\047\007\050\010" +
    "\053\011\052\001\002\000\010\027\uffe8\036\uffe8\040\101" +
    "\001\002\000\010\027\uffe5\036\uffe5\040\072\001\002\000" +
    "\006\027\uffe9\036\uffe9\001\002\000\010\027\uffdb\036\uffdb" +
    "\040\065\001\002\000\010\027\uffe0\036\uffe0\040\054\001" +
    "\002\000\006\045\055\047\057\001\002\000\004\041\uffd8" +
    "\001\002\000\004\041\060\001\002\000\004\041\uffd7\001" +
    "\002\000\010\027\uffdf\036\uffdf\042\061\001\002\000\010" +
    "\012\063\013\064\015\062\001\002\000\006\027\uffdc\036" +
    "\uffdc\001\002\000\006\027\uffde\036\uffde\001\002\000\006" +
    "\027\uffdd\036\uffdd\001\002\000\006\045\055\047\057\001" +
    "\002\000\004\041\067\001\002\000\010\027\uffda\036\uffda" +
    "\042\070\001\002\000\004\016\071\001\002\000\006\027" +
    "\uffd9\036\uffd9\001\002\000\006\045\055\047\057\001\002" +
    "\000\004\041\074\001\002\000\010\027\uffe4\036\uffe4\042" +
    "\075\001\002\000\010\012\077\013\100\014\076\001\002" +
    "\000\006\027\uffe1\036\uffe1\001\002\000\006\027\uffe3\036" +
    "\uffe3\001\002\000\006\027\uffe2\036\uffe2\001\002\000\006" +
    "\045\055\047\057\001\002\000\004\041\103\001\002\000" +
    "\010\027\uffe7\036\uffe7\042\104\001\002\000\004\012\105" +
    "\001\002\000\006\027\uffe6\036\uffe6\001\002\000\006\027" +
    "\107\036\ufffa\001\002\000\016\030\110\034\112\043\045" +
    "\045\111\046\116\047\115\001\002\000\010\030\110\034" +
    "\112\047\115\001\002\000\006\027\uffd4\036\uffd4\001\002" +
    "\000\010\030\110\034\112\047\115\001\002\000\006\027" +
    "\uffd3\036\uffd3\001\002\000\014\027\uffd5\030\117\031\120" +
    "\032\122\036\uffd5\001\002\000\016\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\035\uffd1\036\uffd1\001\002\000\006\027\uffd6" +
    "\036\uffd6\001\002\000\010\030\110\034\112\047\115\001" +
    "\002\000\010\030\110\034\112\047\115\001\002\000\010" +
    "\030\110\034\112\047\115\001\002\000\010\030\110\034" +
    "\112\047\115\001\002\000\016\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\035\uffcd\036\uffcd\001\002\000\016\027\uffd0\030" +
    "\uffd0\031\120\032\122\035\uffd0\036\uffd0\001\002\000\016" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\035\uffce\036\uffce\001" +
    "\002\000\016\027\uffcf\030\uffcf\031\120\032\122\035\uffcf" +
    "\036\uffcf\001\002\000\014\027\121\030\117\031\120\032" +
    "\122\035\130\001\002\000\016\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\035\uffcb\036\uffcb\001\002\000\016\027\uffcc\030" +
    "\uffcc\031\120\032\122\035\uffcc\036\uffcc\001\002\000\004" +
    "\024\133\001\002\000\004\037\134\001\002\000\006\033" +
    "\uffed\036\uffed\001\002\000\010\043\045\045\041\046\044" +
    "\001\002\000\004\036\137\001\002\000\004\023\140\001" +
    "\002\000\004\037\141\001\002\000\006\033\uffec\036\uffec" +
    "\001\002\000\010\003\ufff4\033\ufff4\036\ufff4\001\002\000" +
    "\010\003\007\033\ufff6\036\ufff6\001\002\000\006\033\012" +
    "\036\145\001\002\000\004\021\146\001\002\000\004\037" +
    "\147\001\002\000\012\002\ufff3\004\ufff3\033\ufff3\036\ufff3" +
    "\001\002\000\010\043\045\045\041\046\044\001\002\000" +
    "\004\036\152\001\002\000\004\017\153\001\002\000\004" +
    "\037\154\001\002\000\012\002\uffeb\004\uffeb\033\uffeb\036" +
    "\uffeb\001\002\000\010\043\045\045\041\046\044\001\002" +
    "\000\004\036\157\001\002\000\004\020\160\001\002\000" +
    "\004\037\161\001\002\000\012\002\uffea\004\uffea\033\uffea" +
    "\036\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\012\005\014\006\010\012\012" +
    "\020\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\017\001\001\000\010\005\014\006\010\012\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\025\001\001\000\004" +
    "\007\026\001\001\000\006\010\031\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\041\017\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\112\014\113\001" +
    "\001\000\004\014\130\001\001\000\002\001\001\000\004" +
    "\014\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\125\001\001" +
    "\000\004\014\124\001\001\000\004\014\123\001\001\000" +
    "\004\014\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\041\017\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\142\001\001\000\004\004" +
    "\143\001\001\000\010\005\014\006\010\012\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\041\017\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\041\017\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorCiclo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorCiclo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorCiclo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<String> errores = new ArrayList<>();
    private DatosReporte dtsRep;
    private String nuevaCadena = "";
    private int etiquetas = 0;
    private String ultimoID = "";

    public void setDtsRep(DatosReporte dtsRep) {
        this.dtsRep = dtsRep;
    }

    public AnalizadorCiclo(LexerCiclo lexer) {
            super(lexer);
    }

    public void setErrores(ArrayList<String> errores) {
        this.errores = errores;
    }
  
    public void syntax_error(Symbol s) {
        errores.add("Error Sintactico Ciclo: Lexema: " + String.valueOf(s.value) + " | Linea: " +  s.left + " | columna: " +  s.right);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorCiclo$actions {
  private final AnalizadorCiclo parser;

  /** Constructor */
  CUP$AnalizadorCiclo$actions(AnalizadorCiclo parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorCiclo$do_action_part00000000(
    int                        CUP$AnalizadorCiclo$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorCiclo$parser,
    java.util.Stack            CUP$AnalizadorCiclo$stack,
    int                        CUP$AnalizadorCiclo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorCiclo$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorCiclo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorCiclo$parser.done_parsing();
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("Se cumplio 1"); dtsRep.aumentarID();
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= INICIO body NT$0 s1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s1 ::= s1 INICIO body 
            {
              Object RESULT =null;
		System.out.println("Se cumplio 2"); dtsRep.aumentarID();
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_h1 ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(dtsRep.obtenerID(id, idleft)); dtsRep.setEtiquetaValor(id); 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_h1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_h1 ::= var_jison 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = String.valueOf(var);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_h1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_h1 ::= CADENA c 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String resto = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = dtsRep.convertirCadena(cad, nuevaCadena); nuevaCadena = ""; dtsRep.setEtiquetaValor(dtsRep.convertirCadena(cad, nuevaCadena));
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("variable_h1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= body etiqueta_h 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= body etiqueta_table 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= body columna 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= error ETIQUETA_CERRAR 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
dtsRep.agregarEtiqueta("<table>"); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiqueta_table ::= ETIQUETA_ABRIR TABLE ETIQUETA_CERRAR NT$1 body ETIQUETA_FIN TABLE ETIQUETA_CERRAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-4)).value;
		dtsRep.agregarEtiqueta("</table>");etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("etiqueta_table",3, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT =null;
dtsRep.agregarEtiqueta("<tr>"); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // columna ::= ETIQUETA_ABRIR TR ETIQUETA_CERRAR NT$2 fila ETIQUETA_FIN TR ETIQUETA_CERRAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-4)).value;
		dtsRep.agregarEtiqueta("</tr>"); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("columna",4, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fila ::= fila fila_th 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fila ::= fila fila_td 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fila ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fila_th ::= ETIQUETA_ABRIR TH ETIQUETA_CERRAR variable_h1 ETIQUETA_FIN TH ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.agregarFilaTH(var); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila_th",6, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fila_td ::= ETIQUETA_ABRIR TD ETIQUETA_CERRAR variable_h1 ETIQUETA_FIN TD ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.agregarFilaTD(var); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("fila_td",7, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiqueta_h ::= ETIQUETA_ABRIR H1 ETIQUETA_CERRAR variable_h1 ETIQUETA_FIN H1 ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.agregarEtiqueta("<h1>" + var + "</h1>"); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("etiqueta_h",8, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiqueta_h ::= ETIQUETA_ABRIR H2 ETIQUETA_CERRAR variable_h1 ETIQUETA_FIN H2 ETIQUETA_CERRAR 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		dtsRep.agregarEtiqueta("<h2>" + var + "</h2>"); etiquetas++;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("etiqueta_h",8, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_jison ::= RESULT PUNTO SCORE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = dtsRep.obtenerValorJISON("Score", 0, "score", valleft); dtsRep.setEtiquetaValor("RESULT.Score");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_jison ::= RESULT PUNTO CLASES 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_jison ::= RESULT PUNTO CLASES CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Clases", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_jison ::= RESULT PUNTO CLASES CORCHETE_A valor CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Clases", val, "Nombre", valleft); dtsRep.setEtiquetaValor("RESULT.Clases[" + ultimoID +"].Nombre");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_jison ::= RESULT PUNTO VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, "Nombre", valleft); dtsRep.setEtiquetaValor("RESULT.Variables[" + ultimoID +"].Nombre");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, "Tipo", valleft); dtsRep.setEtiquetaValor("RESULT.Variables[" + ultimoID +"].Tipo");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_jison ::= RESULT PUNTO VARIABLES CORCHETE_A valor CORCHETE_C PUNTO FUNCION 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Variables", val, "Funcion", valleft); dtsRep.setEtiquetaValor("RESULT.Variables[" + ultimoID +"].Funcion");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_jison ::= RESULT PUNTO METODOS 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C PUNTO NOMBRE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, "Nombre", valleft); dtsRep.setEtiquetaValor("RESULT.Metodos[" + ultimoID +"].Nombre");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C PUNTO TIPO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, "Tipo", valleft); dtsRep.setEtiquetaValor("RESULT.Metodos[" + ultimoID +"].Tipo");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_jison ::= RESULT PUNTO METODOS CORCHETE_A valor CORCHETE_C PUNTO PARAMETROS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Metodos", val, "Parametros", valleft); dtsRep.setEtiquetaValor("RESULT.Metodos[" + ultimoID +"].Parametros");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_jison ::= RESULT PUNTO COMENTARIOS 
            {
              Object RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_jison ::= RESULT PUNTO COMENTARIOS CORCHETE_A valor CORCHETE_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = dtsRep.obtenerValorJISON("Comentarios", val, null, valleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_jison ::= RESULT PUNTO COMENTARIOS CORCHETE_A valor CORCHETE_C PUNTO TEXTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-3)).value;
		RESULT = dtsRep.obtenerValorJISON("Comentarios", val, "Texto", valleft); dtsRep.setEtiquetaValor("RESULT.Comentarios[" + ultimoID +"].Texto");
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("var_jison",9, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= ID 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = Integer.parseInt(dtsRep.obtenerID(e, eleft)); ultimoID = e;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= ENTERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = e; ultimoID = String.valueOf(e);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c ::= c SUMA CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		nuevaCadena = nuevaCadena  + cad.substring(1,cad.length()-1);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("c",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c ::= c SUMA expresion_string 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		nuevaCadena = nuevaCadena  +e;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("c",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c ::= c SUMA ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		nuevaCadena = nuevaCadena + dtsRep.obtenerID(id, idleft);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("c",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c ::= c SUMA var_jison 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		nuevaCadena = nuevaCadena  + String.valueOf(var);
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("c",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c ::= 
            {
              String RESULT =null;

              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("c",12, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_string ::= ENTERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_string ::= expresion_string SUMA expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_string ::= expresion_string RESTA expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_string ::= expresion_string MULTIPLICACION expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_string ::= expresion_string DIVISION expresion_string 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		 RESULT = e1 / e2;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_string ::= RESTA expresion_string 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.peek()).value;
		RESULT = 0 - e;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_string ::= PARENTESIS_A expresion_string PARENTESIS_C 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-1)).value;
		RESULT = e;
              CUP$AnalizadorCiclo$result = parser.getSymbolFactory().newSymbol("expresion_string",10, ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.elementAt(CUP$AnalizadorCiclo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorCiclo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorCiclo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorCiclo$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorCiclo$do_action(
    int                        CUP$AnalizadorCiclo$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorCiclo$parser,
    java.util.Stack            CUP$AnalizadorCiclo$stack,
    int                        CUP$AnalizadorCiclo$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorCiclo$do_action_part00000000(
                               CUP$AnalizadorCiclo$act_num,
                               CUP$AnalizadorCiclo$parser,
                               CUP$AnalizadorCiclo$stack,
                               CUP$AnalizadorCiclo$top);
    }
}

}
