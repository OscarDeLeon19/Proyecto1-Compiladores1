
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis.sintactico;

import java_cup.runtime.Symbol;
import analisis.lexico.LexerServidor;
import main.Lista;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\003\004\000\002\004\005" +
    "\000\002\004\004\000\002\004\002\000\002\005\011\000" +
    "\002\006\004\000\002\006\005\000\002\006\004\000\002" +
    "\006\002\000\002\006\004\000\002\006\004\000\002\007" +
    "\012\000\002\022\013\000\002\022\013\000\002\022\013" +
    "\000\002\022\013\000\002\022\013\000\002\022\013\000" +
    "\002\022\013\000\002\060\004\000\002\060\004\000\002" +
    "\060\004\000\002\060\004\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\006\000\002\060\006" +
    "\000\002\060\005\000\002\060\005\000\002\060\002\000" +
    "\002\062\004\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\062\004\000\002\062" +
    "\004\000\002\062\006\000\002\062\006\000\002\062\005" +
    "\000\002\062\005\000\002\062\004\000\002\062\002\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\006\000\002\010\006\000\002\010\004" +
    "\000\002\010\002\000\002\056\011\000\002\056\012\000" +
    "\002\061\005\000\002\057\007\000\002\057\007\000\002" +
    "\057\002\000\002\055\013\000\002\043\007\000\002\054" +
    "\003\000\002\054\002\000\002\044\005\000\002\044\003" +
    "\000\002\044\003\000\002\044\005\000\002\041\012\000" +
    "\002\042\006\000\002\042\004\000\002\042\002\000\002" +
    "\036\011\000\002\037\003\000\002\037\005\000\002\037" +
    "\003\000\002\037\005\000\002\037\007\000\002\037\005" +
    "\000\002\037\007\000\002\037\005\000\002\037\005\000" +
    "\002\037\007\000\002\032\023\000\002\032\022\000\002" +
    "\033\003\000\002\033\003\000\002\034\003\000\002\034" +
    "\003\000\002\040\003\000\002\040\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\024\005\000\002\024\007\000" +
    "\002\024\007\000\002\025\005\000\002\025\007\000\002" +
    "\025\007\000\002\026\005\000\002\026\010\000\002\026" +
    "\007\000\002\027\005\000\002\027\007\000\002\027\007" +
    "\000\002\031\005\000\002\031\007\000\002\031\007\000" +
    "\002\030\005\000\002\030\012\000\002\030\007\000\002" +
    "\030\005\000\002\030\013\000\002\030\007\000\002\013" +
    "\006\000\002\013\006\000\002\013\010\000\002\023\003" +
    "\000\002\023\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\006\000\002\023\007\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\002\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\006\000\002\016\004\000\002\016\002\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\002\000\002\020\003\000\002\020\002\000" +
    "\002\047\004\000\002\050\005\000\002\050\005\000\002" +
    "\050\002\000\002\046\004\000\002\051\005\000\002\051" +
    "\005\000\002\051\002\000\002\052\004\000\002\052\003" +
    "\000\002\053\003\000\002\053\005\000\002\021\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\004\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\020\003\004\004\ufffe\005\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\001\002\000\004\061\u01c5\001\002" +
    "\000\004\002\u01c4\001\002\000\016\004\011\005\uff5f\023" +
    "\012\024\010\025\014\026\uff5f\001\002\000\006\005\uff5d" +
    "\026\025\001\002\000\026\005\uff60\006\uff60\007\uff60\010" +
    "\uff60\011\uff60\012\uff60\013\uff60\026\uff60\031\uff60\075\uff60" +
    "\001\002\000\004\075\015\001\002\000\026\005\uff61\006" +
    "\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61\026\uff61" +
    "\031\uff61\075\uff61\001\002\000\004\002\000\001\002\000" +
    "\026\005\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62" +
    "\013\uff62\026\uff62\031\uff62\075\uff62\001\002\000\006\061" +
    "\ufffa\072\016\001\002\000\006\054\021\075\022\001\002" +
    "\000\004\061\020\001\002\000\016\004\uffff\005\uffff\023" +
    "\uffff\024\uffff\025\uffff\026\uffff\001\002\000\004\061\ufffb" +
    "\001\002\000\006\061\ufffa\072\016\001\002\000\004\061" +
    "\ufffc\001\002\000\004\005\026\001\002\000\004\005\uff5e" +
    "\001\002\000\004\075\027\001\002\000\004\062\030\001" +
    "\002\000\034\003\031\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\023\ufff5\024\ufff5\025\ufff5\031\ufff5\063" +
    "\ufff5\075\ufff5\001\002\000\006\061\u01c2\063\u01c3\001\002" +
    "\000\032\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f\013" +
    "\uff5f\023\012\024\010\025\014\031\uff5f\063\036\075\uff5f" +
    "\001\002\000\022\006\040\007\045\010\047\011\055\012" +
    "\050\013\044\031\046\075\051\001\002\000\032\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\031\ufff8\063\ufff8\075\ufff8\001\002\000\032" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\031\ufff6\063\ufff6\075\ufff6\001\002" +
    "\000\004\002\ufff9\001\002\000\060\003\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\063\uff94\073\uff94" +
    "\075\uff94\001\002\000\004\075\u01bb\001\002\000\032\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\031\ufff7\063\ufff7\075\ufff7\001\002\000" +
    "\060\003\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\063\uff95\073\uff95\075\uff95\001\002\000\060\003" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\027\uff97\030\uff97\031\uff97\032\uff97" +
    "\063\uff97\073\uff97\075\uff97\001\002\000\004\075\u01b4\001" +
    "\002\000\004\075\u01ad\001\002\000\004\075\u01a6\001\002" +
    "\000\004\075\u019f\001\002\000\004\075\u0198\001\002\000" +
    "\006\056\u0192\075\235\001\002\000\060\003\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\032\uff98\063\uff98\073" +
    "\uff98\075\uff98\001\002\000\060\003\uff93\006\uff93\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\063\uff93\073\uff93\075" +
    "\uff93\001\002\000\060\003\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\063\uff96\073\uff96\075\uff96\001" +
    "\002\000\004\075\056\001\002\000\010\056\060\061\057" +
    "\066\061\001\002\000\060\003\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\016\uff89\017\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\063\uff89\073\uff89\075\uff89" +
    "\001\002\000\022\006\066\007\070\010\071\011\076\012" +
    "\072\013\067\057\uff6a\075\073\001\002\000\006\041\062" +
    "\075\063\001\002\000\004\061\065\001\002\000\004\061" +
    "\064\001\002\000\060\003\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\027\uff87" +
    "\030\uff87\031\uff87\032\uff87\063\uff87\073\uff87\075\uff87\001" +
    "\002\000\060\003\uff88\006\uff88\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\013\uff88\014\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\024\uff88\025\uff88\027\uff88\030\uff88" +
    "\031\uff88\032\uff88\063\uff88\073\uff88\075\uff88\001\002\000" +
    "\004\075\uff69\001\002\000\004\075\uff64\001\002\000\004" +
    "\075\uff68\001\002\000\004\075\uff67\001\002\000\004\075" +
    "\uff65\001\002\000\004\075\uff63\001\002\000\004\057\102" +
    "\001\002\000\004\075\077\001\002\000\004\075\uff66\001" +
    "\002\000\006\057\uff6b\067\100\001\002\000\022\006\066" +
    "\007\070\010\071\011\076\012\072\013\067\057\uff6a\075" +
    "\073\001\002\000\004\057\uff6c\001\002\000\004\062\103" +
    "\001\002\000\042\003\130\006\105\007\122\010\124\011" +
    "\106\012\134\013\121\014\113\016\133\017\107\020\120" +
    "\021\112\030\111\032\116\063\uffdf\075\115\001\002\000" +
    "\042\003\130\006\105\007\122\010\124\011\106\012\134" +
    "\013\121\014\113\016\133\017\107\020\120\021\112\030" +
    "\111\032\116\063\uffdf\075\115\001\002\000\004\075\u018a" +
    "\001\002\000\004\075\u0189\001\002\000\004\056\u0183\001" +
    "\002\000\042\003\130\006\105\007\122\010\124\011\106" +
    "\012\134\013\121\014\113\016\133\017\107\020\120\021" +
    "\112\030\111\032\116\063\uffdf\075\115\001\002\000\026" +
    "\033\250\034\253\035\245\036\144\037\145\040\244\041" +
    "\247\053\140\056\143\075\u017f\001\002\000\004\056\u016a" +
    "\001\002\000\004\056\u0142\001\002\000\050\003\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\027\uff9a\030" +
    "\uff9a\032\uff9a\063\uff9a\073\uff9a\075\uff9a\001\002\000\014" +
    "\050\u013d\051\u013c\056\237\066\240\075\235\001\002\000" +
    "\004\072\u0137\001\002\000\042\003\130\006\105\007\122" +
    "\010\124\011\106\012\134\013\121\014\113\016\133\017" +
    "\107\020\120\021\112\030\111\032\116\063\uffdf\075\115" +
    "\001\002\000\004\062\u011a\001\002\000\004\075\u0110\001" +
    "\002\000\004\075\u0109\001\002\000\004\063\u0108\001\002" +
    "\000\004\075\u0100\001\002\000\050\003\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\027\uff9b\030\uff9b\032" +
    "\uff9b\063\uff9b\073\uff9b\075\uff9b\001\002\000\042\003\130" +
    "\006\105\007\122\010\124\011\106\012\134\013\121\014" +
    "\113\016\133\017\107\020\120\021\112\030\111\032\116" +
    "\063\uffdf\075\115\001\002\000\042\003\130\006\105\007" +
    "\122\010\124\011\106\012\134\013\121\014\113\016\133" +
    "\017\107\020\120\021\112\030\111\032\116\063\uffdf\075" +
    "\115\001\002\000\004\061\375\001\002\000\042\003\130" +
    "\006\105\007\122\010\124\011\106\012\134\013\121\014" +
    "\113\016\133\017\107\020\120\021\112\030\111\032\116" +
    "\063\uffdf\075\115\001\002\000\042\003\130\006\105\007" +
    "\122\010\124\011\106\012\134\013\121\014\113\016\133" +
    "\017\107\020\120\021\112\030\111\032\116\063\uffdf\075" +
    "\115\001\002\000\004\056\164\001\002\000\004\075\135" +
    "\001\002\000\006\061\136\066\137\001\002\000\060\003" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\014\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\063\uff8f\073\uff8f\075\uff8f\001\002\000\014\036\144\037" +
    "\145\053\140\056\143\075\141\001\002\000\012\036\144" +
    "\037\145\053\140\056\143\001\002\000\004\061\162\001" +
    "\002\000\024\046\uff50\047\uff50\052\uff50\053\uff50\054\uff50" +
    "\055\uff50\057\uff50\061\uff50\067\uff50\001\002\000\012\036" +
    "\144\037\145\053\140\056\143\001\002\000\024\046\uff6d" +
    "\047\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\057\uff6d\061" +
    "\uff6d\067\uff6d\001\002\000\024\046\uff6e\047\uff6e\052\uff6e" +
    "\053\uff6e\054\uff6e\055\uff6e\057\uff6e\061\uff6e\067\uff6e\001" +
    "\002\000\014\052\152\053\147\054\150\055\153\061\151" +
    "\001\002\000\012\036\144\037\145\053\140\056\143\001" +
    "\002\000\012\036\144\037\145\053\140\056\143\001\002" +
    "\000\060\003\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\063\uff8e\073\uff8e\075\uff8e\001\002\000\012" +
    "\036\144\037\145\053\140\056\143\001\002\000\012\036" +
    "\144\037\145\053\140\056\143\001\002\000\024\046\uff4c" +
    "\047\uff4c\052\uff4c\053\uff4c\054\uff4c\055\uff4c\057\uff4c\061" +
    "\uff4c\067\uff4c\001\002\000\024\046\uff4f\047\uff4f\052\uff4f" +
    "\053\uff4f\054\150\055\153\057\uff4f\061\uff4f\067\uff4f\001" +
    "\002\000\024\046\uff4d\047\uff4d\052\uff4d\053\uff4d\054\uff4d" +
    "\055\uff4d\057\uff4d\061\uff4d\067\uff4d\001\002\000\024\046" +
    "\uff4e\047\uff4e\052\uff4e\053\uff4e\054\150\055\153\057\uff4e" +
    "\061\uff4e\067\uff4e\001\002\000\014\052\152\053\147\054" +
    "\150\055\153\057\161\001\002\000\024\046\uff4a\047\uff4a" +
    "\052\uff4a\053\uff4a\054\uff4a\055\uff4a\057\uff4a\061\uff4a\067" +
    "\uff4a\001\002\000\060\003\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\063\uff8d\073\uff8d\075\uff8d\001" +
    "\002\000\024\046\uff4b\047\uff4b\052\uff4b\053\uff4b\054\150" +
    "\055\153\057\uff4b\061\uff4b\067\uff4b\001\002\000\006\006" +
    "\166\075\165\001\002\000\004\066\356\001\002\000\004" +
    "\075\167\001\002\000\004\066\170\001\002\000\004\037" +
    "\171\001\002\000\004\061\172\001\002\000\004\075\173" +
    "\001\002\000\016\042\201\043\175\044\177\045\202\070" +
    "\176\071\200\001\002\000\014\036\144\037\145\053\140" +
    "\056\143\075\203\001\002\000\026\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\053\uff9c\056\uff9c" +
    "\075\uff9c\001\002\000\026\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\053\uffa0\056\uffa0\075\uffa0" +
    "\001\002\000\026\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\053\uff9e\056\uff9e\075\uff9e\001\002" +
    "\000\026\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\053\uffa1\056\uffa1\075\uffa1\001\002\000\026" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\053\uff9d\056\uff9d\075\uff9d\001\002\000\026\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\053" +
    "\uff9f\056\uff9f\075\uff9f\001\002\000\004\061\uffa4\001\002" +
    "\000\004\061\206\001\002\000\014\052\152\053\147\054" +
    "\150\055\153\061\uffa5\001\002\000\004\075\207\001\002" +
    "\000\006\050\212\051\210\001\002\000\004\057\uffa6\001" +
    "\002\000\004\057\213\001\002\000\004\057\uffa7\001\002" +
    "\000\004\062\214\001\002\000\042\003\130\006\105\007" +
    "\122\010\124\011\106\012\134\013\121\014\113\016\133" +
    "\017\107\020\120\021\112\027\223\032\116\063\uffc7\075" +
    "\220\001\002\000\046\003\130\006\105\007\122\010\124" +
    "\011\106\012\134\013\121\014\113\016\133\017\107\020" +
    "\120\021\112\022\uffc7\027\223\032\116\063\uffc7\073\uffc7" +
    "\075\220\001\002\000\004\063\354\001\002\000\046\003" +
    "\130\006\105\007\122\010\124\011\106\012\134\013\121" +
    "\014\113\016\133\017\107\020\120\021\112\022\uffc7\027" +
    "\223\032\116\063\uffc7\073\uffc7\075\220\001\002\000\014" +
    "\050\241\051\236\056\237\066\240\075\235\001\002\000" +
    "\046\003\130\006\105\007\122\010\124\011\106\012\134" +
    "\013\121\014\113\016\133\017\107\020\120\021\112\022" +
    "\uffc7\027\223\032\116\063\uffc7\073\uffc7\075\220\001\002" +
    "\000\046\003\130\006\105\007\122\010\124\011\106\012" +
    "\134\013\121\014\113\016\133\017\107\020\120\021\112" +
    "\022\uffc7\027\223\032\116\063\uffc7\073\uffc7\075\220\001" +
    "\002\000\004\061\232\001\002\000\046\003\130\006\105" +
    "\007\122\010\124\011\106\012\134\013\121\014\113\016" +
    "\133\017\107\020\120\021\112\022\uffc7\027\223\032\116" +
    "\063\uffc7\073\uffc7\075\220\001\002\000\046\003\130\006" +
    "\105\007\122\010\124\011\106\012\134\013\121\014\113" +
    "\016\133\017\107\020\120\021\112\022\uffc7\027\223\032" +
    "\116\063\uffc7\073\uffc7\075\220\001\002\000\046\003\130" +
    "\006\105\007\122\010\124\011\106\012\134\013\121\014" +
    "\113\016\133\017\107\020\120\021\112\022\uffc7\027\223" +
    "\032\116\063\uffc7\073\uffc7\075\220\001\002\000\010\022" +
    "\uffd0\063\uffd0\073\uffd0\001\002\000\010\022\uffd1\063\uffd1" +
    "\073\uffd1\001\002\000\010\022\uffce\063\uffce\073\uffce\001" +
    "\002\000\010\022\uffc8\063\uffc8\073\uffc8\001\002\000\010" +
    "\022\uffcf\063\uffcf\073\uffcf\001\002\000\010\022\uffcb\063" +
    "\uffcb\073\uffcb\001\002\000\006\061\341\066\342\001\002" +
    "\000\004\061\337\001\002\000\030\033\250\034\253\035" +
    "\245\036\144\037\145\040\244\041\247\053\140\056\143" +
    "\057\uffbd\075\266\001\002\000\026\033\250\034\253\035" +
    "\245\036\144\037\145\040\244\041\247\053\140\056\143" +
    "\075\254\001\002\000\004\061\242\001\002\000\046\003" +
    "\130\006\105\007\122\010\124\011\106\012\134\013\121" +
    "\014\113\016\133\017\107\020\120\021\112\022\uffc7\027" +
    "\223\032\116\063\uffc7\073\uffc7\075\220\001\002\000\010" +
    "\022\uffca\063\uffca\073\uffca\001\002\000\016\046\uff71\047" +
    "\uff71\052\275\057\uff71\061\uff71\067\uff71\001\002\000\006" +
    "\013\260\075\257\001\002\000\014\046\uff77\047\uff77\057" +
    "\uff77\061\uff77\067\uff77\001\002\000\014\046\uff78\047\uff78" +
    "\057\uff78\061\uff78\067\uff78\001\002\000\014\046\uff70\047" +
    "\uff70\057\uff70\061\uff70\067\uff70\001\002\000\004\061\256" +
    "\001\002\000\024\046\uff7a\047\uff7a\052\152\053\147\054" +
    "\150\055\153\057\uff7a\061\uff7a\067\uff7a\001\002\000\014" +
    "\046\uff6f\047\uff6f\057\uff6f\061\uff6f\067\uff6f\001\002\000" +
    "\004\061\255\001\002\000\050\003\uff7d\006\uff7d\007\uff7d" +
    "\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\027\uff7d\030\uff7d\032\uff7d" +
    "\063\uff7d\073\uff7d\075\uff7d\001\002\000\050\003\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\027\uff7c\030" +
    "\uff7c\032\uff7c\063\uff7c\073\uff7c\075\uff7c\001\002\000\004" +
    "\056\263\001\002\000\004\056\261\001\002\000\004\057" +
    "\262\001\002\000\014\046\uff76\047\uff76\057\uff76\061\uff76" +
    "\067\uff76\001\002\000\030\033\250\034\253\035\245\036" +
    "\144\037\145\040\244\041\247\053\140\056\143\057\uffbd" +
    "\075\266\001\002\000\006\057\uffbb\067\273\001\002\000" +
    "\004\057\272\001\002\000\006\057\uffba\067\270\001\002" +
    "\000\004\057\uffbe\001\002\000\026\033\250\034\253\035" +
    "\245\036\144\037\145\040\244\041\247\053\140\056\143" +
    "\075\266\001\002\000\004\057\uffb9\001\002\000\014\046" +
    "\uff75\047\uff75\057\uff75\061\uff75\067\uff75\001\002\000\026" +
    "\033\250\034\253\035\245\036\144\037\145\040\244\041" +
    "\247\053\140\056\143\075\266\001\002\000\004\057\uffbc" +
    "\001\002\000\016\036\144\037\145\040\277\053\305\056" +
    "\306\075\303\001\002\000\014\046\uff79\047\uff79\057\uff79" +
    "\061\uff79\067\uff79\001\002\000\016\046\uff71\047\uff71\052" +
    "\275\057\uff71\061\uff71\067\uff71\001\002\000\024\046\uff55" +
    "\047\uff55\052\uff55\053\uff55\054\324\055\326\057\uff55\061" +
    "\uff55\067\uff55\001\002\000\024\046\uff53\047\uff53\052\uff53" +
    "\053\uff53\054\uff53\055\uff53\057\uff53\061\uff53\067\uff53\001" +
    "\002\000\024\046\uff52\047\uff52\052\uff52\053\uff52\054\uff52" +
    "\055\uff52\057\uff52\061\uff52\067\uff52\001\002\000\016\046" +
    "\uff71\047\uff71\052\275\057\uff71\061\uff71\067\uff71\001\002" +
    "\000\016\046\uff71\047\uff71\052\275\057\uff71\061\uff71\067" +
    "\uff71\001\002\000\010\036\144\037\145\056\306\001\002" +
    "\000\012\036\144\037\145\053\305\056\306\001\002\000" +
    "\020\046\uff59\047\uff59\052\312\053\311\057\uff59\061\uff59" +
    "\067\uff59\001\002\000\016\046\uff5c\047\uff5c\052\uff5c\057" +
    "\uff5c\061\uff5c\067\uff5c\001\002\000\012\036\144\037\145" +
    "\053\305\056\306\001\002\000\012\036\144\037\145\053" +
    "\305\056\306\001\002\000\020\046\uff59\047\uff59\052\312" +
    "\053\311\057\uff59\061\uff59\067\uff59\001\002\000\016\046" +
    "\uff5b\047\uff5b\052\uff5b\057\uff5b\061\uff5b\067\uff5b\001\002" +
    "\000\020\046\uff59\047\uff59\052\312\053\311\057\uff59\061" +
    "\uff59\067\uff59\001\002\000\016\046\uff5a\047\uff5a\052\uff5a" +
    "\057\uff5a\061\uff5a\067\uff5a\001\002\000\004\057\320\001" +
    "\002\000\024\046\uff51\047\uff51\052\uff51\053\uff51\054\uff51" +
    "\055\uff51\057\uff51\061\uff51\067\uff51\001\002\000\024\046" +
    "\uff54\047\uff54\052\uff54\053\uff54\054\uff54\055\uff54\057\uff54" +
    "\061\uff54\067\uff54\001\002\000\014\046\uff73\047\uff73\057" +
    "\uff73\061\uff73\067\uff73\001\002\000\014\046\uff72\047\uff72" +
    "\057\uff72\061\uff72\067\uff72\001\002\000\012\036\144\037" +
    "\145\053\305\056\306\001\002\000\020\046\uff58\047\uff58" +
    "\052\uff58\053\uff58\057\uff58\061\uff58\067\uff58\001\002\000" +
    "\012\036\144\037\145\053\305\056\306\001\002\000\024" +
    "\046\uff55\047\uff55\052\uff55\053\uff55\054\324\055\326\057" +
    "\uff55\061\uff55\067\uff55\001\002\000\020\046\uff56\047\uff56" +
    "\052\uff56\053\uff56\057\uff56\061\uff56\067\uff56\001\002\000" +
    "\024\046\uff55\047\uff55\052\uff55\053\uff55\054\324\055\326" +
    "\057\uff55\061\uff55\067\uff55\001\002\000\020\046\uff57\047" +
    "\uff57\052\uff57\053\uff57\057\uff57\061\uff57\067\uff57\001\002" +
    "\000\014\046\uff74\047\uff74\057\uff74\061\uff74\067\uff74\001" +
    "\002\000\004\057\335\001\002\000\004\061\336\001\002" +
    "\000\050\003\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\027\uffbf\030\uffbf\032\uffbf\063\uffbf\073\uffbf\075" +
    "\uffbf\001\002\000\046\003\130\006\105\007\122\010\124" +
    "\011\106\012\134\013\121\014\113\016\133\017\107\020" +
    "\120\021\112\022\uffc7\027\223\032\116\063\uffc7\073\uffc7" +
    "\075\220\001\002\000\010\022\uffc9\063\uffc9\073\uffc9\001" +
    "\002\000\060\003\uff80\006\uff80\007\uff80\010\uff80\011\uff80" +
    "\012\uff80\013\uff80\014\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\027\uff80\030\uff80" +
    "\031\uff80\032\uff80\063\uff80\073\uff80\075\uff80\001\002\000" +
    "\006\035\344\075\343\001\002\000\004\061\352\001\002" +
    "\000\004\075\345\001\002\000\004\056\346\001\002\000" +
    "\030\033\250\034\253\035\245\036\144\037\145\040\244" +
    "\041\247\053\140\056\143\057\uffbd\075\266\001\002\000" +
    "\004\057\350\001\002\000\004\061\351\001\002\000\060" +
    "\003\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013" +
    "\uff7f\014\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\063\uff7f\073\uff7f\075\uff7f\001\002\000\060\003\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\063" +
    "\uff7e\073\uff7e\075\uff7e\001\002\000\010\022\uffcd\063\uffcd" +
    "\073\uffcd\001\002\000\050\003\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\027\uffa9\030\uffa9\032\uffa9\063" +
    "\uffa9\073\uffa9\075\uffa9\001\002\000\010\022\uffcc\063\uffcc" +
    "\073\uffcc\001\002\000\004\037\357\001\002\000\004\061" +
    "\360\001\002\000\004\075\361\001\002\000\016\042\201" +
    "\043\175\044\177\045\202\070\176\071\200\001\002\000" +
    "\014\036\144\037\145\053\140\056\143\075\203\001\002" +
    "\000\004\061\364\001\002\000\004\075\365\001\002\000" +
    "\006\050\212\051\210\001\002\000\004\057\367\001\002" +
    "\000\004\062\370\001\002\000\042\003\130\006\105\007" +
    "\122\010\124\011\106\012\134\013\121\014\113\016\133" +
    "\017\107\020\120\021\112\027\223\032\116\063\uffc7\075" +
    "\220\001\002\000\004\063\372\001\002\000\050\003\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\027\uffa8" +
    "\030\uffa8\032\uffa8\063\uffa8\073\uffa8\075\uffa8\001\002\000" +
    "\004\063\uffe9\001\002\000\004\063\uffea\001\002\000\050" +
    "\003\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\027\uff99\030\uff99\032\uff99\063\uff99\073\uff99\075\uff99\001" +
    "\002\000\004\063\uffe7\001\002\000\004\063\uffe8\001\002" +
    "\000\006\061\u0101\066\u0102\001\002\000\060\003\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\063\uff8c" +
    "\073\uff8c\075\uff8c\001\002\000\006\040\u0104\075\u0103\001" +
    "\002\000\004\061\u0107\001\002\000\006\052\275\061\uff71" +
    "\001\002\000\004\061\u0106\001\002\000\060\003\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\063\uff8b" +
    "\073\uff8b\075\uff8b\001\002\000\060\003\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\063\uff8a\073\uff8a" +
    "\075\uff8a\001\002\000\032\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\013\uffee\023\uffee\024\uffee\025\uffee\031\uffee" +
    "\063\uffee\075\uffee\001\002\000\006\061\u010a\066\u010b\001" +
    "\002\000\060\003\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\014\uff86\016\uff86\017\uff86\020\uff86\021" +
    "\uff86\022\uff86\023\uff86\024\uff86\025\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\063\uff86\073\uff86\075\uff86\001\002\000" +
    "\010\033\250\034\253\075\u010c\001\002\000\004\061\u010f" +
    "\001\002\000\004\061\u010e\001\002\000\060\003\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\027\uff85\030\uff85\031\uff85\032\uff85\063\uff85" +
    "\073\uff85\075\uff85\001\002\000\060\003\uff84\006\uff84\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\016\uff84" +
    "\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\063\uff84\073\uff84" +
    "\075\uff84\001\002\000\006\061\u0111\066\u0112\001\002\000" +
    "\060\003\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\063\uff83\073\uff83\075\uff83\001\002\000\006\035" +
    "\u0114\075\u0113\001\002\000\004\061\u0119\001\002\000\004" +
    "\013\u0115\001\002\000\004\056\u0116\001\002\000\004\057" +
    "\u0117\001\002\000\004\061\u0118\001\002\000\060\003\uff82" +
    "\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014" +
    "\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82" +
    "\024\uff82\025\uff82\027\uff82\030\uff82\031\uff82\032\uff82\063" +
    "\uff82\073\uff82\075\uff82\001\002\000\060\003\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81" +
    "\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81\063\uff81\073" +
    "\uff81\075\uff81\001\002\000\042\003\130\006\105\007\122" +
    "\010\124\011\106\012\134\013\121\014\113\016\133\017" +
    "\107\020\120\021\112\027\223\032\116\063\uffc7\075\220" +
    "\001\002\000\004\063\u011c\001\002\000\004\017\u011d\001" +
    "\002\000\004\056\u011e\001\002\000\012\033\250\034\253" +
    "\056\u0121\075\u011f\001\002\000\024\042\201\043\175\044" +
    "\177\045\202\046\u0129\047\u0128\057\uffb1\070\176\071\200" +
    "\001\002\000\010\046\u0129\047\u0128\057\uffb3\001\002\000" +
    "\012\033\250\034\253\056\u0121\075\u011f\001\002\000\004" +
    "\057\u0123\001\002\000\004\061\u0124\001\002\000\050\003" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\063\uffc0\073\uffc0\075\uffc0\001\002" +
    "\000\004\057\u0126\001\002\000\010\046\u0129\047\u0128\057" +
    "\uffab\001\002\000\012\033\250\034\253\056\u0121\075\u011f" +
    "\001\002\000\012\033\uffa2\034\uffa2\056\uffa2\075\uffa2\001" +
    "\002\000\012\033\uffa3\034\uffa3\056\uffa3\075\uffa3\001\002" +
    "\000\004\057\uffaa\001\002\000\012\033\250\034\253\056" +
    "\u0121\075\u011f\001\002\000\004\057\uffb2\001\002\000\012" +
    "\033\250\034\253\056\u0121\075\u011f\001\002\000\026\033" +
    "\250\034\253\035\245\036\144\037\145\040\244\041\247" +
    "\053\140\056\143\075\u0130\001\002\000\010\046\u0129\047" +
    "\u0128\057\uffac\001\002\000\010\046\u0129\047\u0128\057\uffae" +
    "\001\002\000\012\033\250\034\253\056\u0121\075\u011f\001" +
    "\002\000\004\057\uffaf\001\002\000\012\033\250\034\253" +
    "\056\u0121\075\u011f\001\002\000\004\057\uffad\001\002\000" +
    "\004\057\uffb0\001\002\000\004\063\uffe4\001\002\000\004" +
    "\075\u0138\001\002\000\004\066\u0139\001\002\000\004\075" +
    "\u013a\001\002\000\004\061\u013b\001\002\000\050\003\uff7b" +
    "\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014" +
    "\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\027\uff7b" +
    "\030\uff7b\032\uff7b\063\uff7b\073\uff7b\075\uff7b\001\002\000" +
    "\004\061\u0140\001\002\000\004\061\u013e\001\002\000\042" +
    "\003\130\006\105\007\122\010\124\011\106\012\134\013" +
    "\121\014\113\016\133\017\107\020\120\021\112\030\111" +
    "\032\116\063\uffdf\075\115\001\002\000\004\063\uffe3\001" +
    "\002\000\042\003\130\006\105\007\122\010\124\011\106" +
    "\012\134\013\121\014\113\016\133\017\107\020\120\021" +
    "\112\030\111\032\116\063\uffdf\075\115\001\002\000\004" +
    "\063\uffe2\001\002\000\012\033\250\034\253\056\u0121\075" +
    "\u011f\001\002\000\004\057\u0144\001\002\000\004\062\u0145" +
    "\001\002\000\044\003\130\006\105\007\122\010\124\011" +
    "\106\012\134\013\121\014\113\016\133\017\107\020\120" +
    "\021\112\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001" +
    "\002\000\044\003\130\006\105\007\122\010\124\011\106" +
    "\012\134\013\121\014\113\016\133\017\107\020\120\021" +
    "\112\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001\002" +
    "\000\044\003\130\006\105\007\122\010\124\011\106\012" +
    "\134\013\121\014\113\016\133\017\107\020\120\021\112" +
    "\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001\002\000" +
    "\026\033\250\034\253\035\245\036\144\037\145\040\244" +
    "\041\247\053\140\056\143\075\u0165\001\002\000\014\050" +
    "\u015f\051\u015e\056\237\066\240\075\235\001\002\000\044" +
    "\003\130\006\105\007\122\010\124\011\106\012\134\013" +
    "\121\014\113\016\133\017\107\020\120\021\112\027\u014c" +
    "\030\u0148\032\116\063\uffd2\075\u0149\001\002\000\044\003" +
    "\130\006\105\007\122\010\124\011\106\012\134\013\121" +
    "\014\113\016\133\017\107\020\120\021\112\027\u014c\030" +
    "\u0148\032\116\063\uffd2\075\u0149\001\002\000\004\061\u015b" +
    "\001\002\000\044\003\130\006\105\007\122\010\124\011" +
    "\106\012\134\013\121\014\113\016\133\017\107\020\120" +
    "\021\112\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001" +
    "\002\000\044\003\130\006\105\007\122\010\124\011\106" +
    "\012\134\013\121\014\113\016\133\017\107\020\120\021" +
    "\112\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001\002" +
    "\000\044\003\130\006\105\007\122\010\124\011\106\012" +
    "\134\013\121\014\113\016\133\017\107\020\120\021\112" +
    "\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001\002\000" +
    "\004\063\u0151\001\002\000\052\003\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\u0153\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\027\uffb5\030\uffb5" +
    "\032\uffb5\063\uffb5\073\uffb5\075\uffb5\001\002\000\050\003" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\027" +
    "\uffb8\030\uffb8\032\uffb8\063\uffb8\073\uffb8\075\uffb8\001\002" +
    "\000\006\014\113\062\u0155\001\002\000\050\003\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\027\uffb6\030" +
    "\uffb6\032\uffb6\063\uffb6\073\uffb6\075\uffb6\001\002\000\044" +
    "\003\130\006\105\007\122\010\124\011\106\012\134\013" +
    "\121\014\113\016\133\017\107\020\120\021\112\027\u014c" +
    "\030\u0148\032\116\063\uffd2\075\u0149\001\002\000\004\063" +
    "\u0157\001\002\000\050\003\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\027\uffb7\030\uffb7\032\uffb7\063\uffb7" +
    "\073\uffb7\075\uffb7\001\002\000\004\063\uffdd\001\002\000" +
    "\004\063\uffde\001\002\000\004\063\uffdb\001\002\000\004" +
    "\063\uffd3\001\002\000\004\063\uffdc\001\002\000\004\063" +
    "\uffd8\001\002\000\004\061\u0162\001\002\000\004\061\u0160" +
    "\001\002\000\044\003\130\006\105\007\122\010\124\011" +
    "\106\012\134\013\121\014\113\016\133\017\107\020\120" +
    "\021\112\027\u014c\030\u0148\032\116\063\uffd2\075\u0149\001" +
    "\002\000\004\063\uffd7\001\002\000\044\003\130\006\105" +
    "\007\122\010\124\011\106\012\134\013\121\014\113\016" +
    "\133\017\107\020\120\021\112\027\u014c\030\u0148\032\116" +
    "\063\uffd2\075\u0149\001\002\000\004\063\uffd6\001\002\000" +
    "\004\061\u0167\001\002\000\004\061\u0166\001\002\000\004" +
    "\063\uffd4\001\002\000\004\063\uffd5\001\002\000\004\063" +
    "\uffda\001\002\000\004\063\uffd9\001\002\000\004\075\u016b" +
    "\001\002\000\004\057\u016c\001\002\000\004\062\u016d\001" +
    "\002\000\010\022\u016f\063\uffc1\073\uffc1\001\002\000\006" +
    "\063\u017a\073\u0178\001\002\000\006\037\u0171\040\u0170\001" +
    "\002\000\004\060\u0175\001\002\000\004\060\u0172\001\002" +
    "\000\046\003\130\006\105\007\122\010\124\011\106\012" +
    "\134\013\121\014\113\016\133\017\107\020\120\021\112" +
    "\022\uffc7\027\223\032\116\063\uffc7\073\uffc7\075\220\001" +
    "\002\000\010\022\u016f\063\uffc1\073\uffc1\001\002\000\006" +
    "\063\uffc3\073\uffc3\001\002\000\046\003\130\006\105\007" +
    "\122\010\124\011\106\012\134\013\121\014\113\016\133" +
    "\017\107\020\120\021\112\022\uffc7\027\223\032\116\063" +
    "\uffc7\073\uffc7\075\220\001\002\000\010\022\u016f\063\uffc1" +
    "\073\uffc1\001\002\000\006\063\uffc2\073\uffc2\001\002\000" +
    "\004\060\u017c\001\002\000\004\063\u017b\001\002\000\050" +
    "\003\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\027\uffc6\030\uffc6\032\uffc6\063\uffc6\073\uffc6\075\uffc6\001" +
    "\002\000\050\003\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\027\uffc5\030\uffc5\032\uffc5\063\uffc5\073\uffc5" +
    "\075\uffc5\001\002\000\042\003\130\006\105\007\122\010" +
    "\124\011\106\012\134\013\121\014\113\016\133\017\107" +
    "\020\120\021\112\027\223\032\116\063\uffc7\075\220\001" +
    "\002\000\004\063\uffc4\001\002\000\004\061\u0181\001\002" +
    "\000\004\061\u0180\001\002\000\004\063\uffe0\001\002\000" +
    "\004\063\uffe1\001\002\000\004\063\uffe6\001\002\000\012" +
    "\033\250\034\253\056\u0121\075\u011f\001\002\000\004\057" +
    "\u0185\001\002\000\004\062\u0186\001\002\000\042\003\130" +
    "\006\105\007\122\010\124\011\106\012\134\013\121\014" +
    "\113\016\133\017\107\020\120\021\112\027\223\032\116" +
    "\063\uffc7\075\220\001\002\000\004\063\u0188\001\002\000" +
    "\050\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\027\uffb4\030\uffb4\032\uffb4\063\uffb4\073\uffb4\075\uffb4" +
    "\001\002\000\006\061\057\066\061\001\002\000\006\061" +
    "\u018b\066\u018c\001\002\000\060\003\uff92\006\uff92\007\uff92" +
    "\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\016\uff92\017" +
    "\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92" +
    "\027\uff92\030\uff92\031\uff92\032\uff92\063\uff92\073\uff92\075" +
    "\uff92\001\002\000\014\036\144\037\145\053\140\056\143" +
    "\075\u018d\001\002\000\004\061\u0190\001\002\000\014\052" +
    "\152\053\147\054\150\055\153\061\u018f\001\002\000\060" +
    "\003\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013" +
    "\uff91\014\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\024\uff91\025\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\063\uff91\073\uff91\075\uff91\001\002\000\060\003\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90" +
    "\024\uff90\025\uff90\027\uff90\030\uff90\031\uff90\032\uff90\063" +
    "\uff90\073\uff90\075\uff90\001\002\000\004\063\uffe5\001\002" +
    "\000\022\006\066\007\070\010\071\011\076\012\072\013" +
    "\067\057\uff6a\075\073\001\002\000\004\057\u0194\001\002" +
    "\000\004\062\u0195\001\002\000\042\003\130\006\105\007" +
    "\122\010\124\011\106\012\134\013\121\014\113\016\133" +
    "\017\107\020\120\021\112\027\223\032\116\063\uffc7\075" +
    "\220\001\002\000\004\063\u0197\001\002\000\032\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\031\ufff2\063\ufff2\075\ufff2\001\002\000\010" +
    "\056\u0199\061\136\066\137\001\002\000\022\006\066\007" +
    "\070\010\071\011\076\012\072\013\067\057\uff6a\075\073" +
    "\001\002\000\004\057\u019b\001\002\000\004\062\u019c\001" +
    "\002\000\042\003\130\006\105\007\122\010\124\011\106" +
    "\012\134\013\121\014\113\016\133\017\107\020\120\021" +
    "\112\030\111\032\116\063\uffdf\075\115\001\002\000\004" +
    "\063\u019e\001\002\000\032\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\023\uffed\024\uffed\025\uffed\031\uffed" +
    "\063\uffed\075\uffed\001\002\000\010\056\u01a0\061\u0101\066" +
    "\u0102\001\002\000\022\006\066\007\070\010\071\011\076" +
    "\012\072\013\067\057\uff6a\075\073\001\002\000\004\057" +
    "\u01a2\001\002\000\004\062\u01a3\001\002\000\042\003\130" +
    "\006\105\007\122\010\124\011\106\012\134\013\121\014" +
    "\113\016\133\017\107\020\120\021\112\030\111\032\116" +
    "\063\uffdf\075\115\001\002\000\004\063\u01a5\001\002\000" +
    "\032\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\031\ufff1\063\ufff1\075\ufff1\001" +
    "\002\000\004\056\u01a7\001\002\000\022\006\066\007\070" +
    "\010\071\011\076\012\072\013\067\057\uff6a\075\073\001" +
    "\002\000\004\057\u01a9\001\002\000\004\062\u01aa\001\002" +
    "\000\042\003\130\006\105\007\122\010\124\011\106\012" +
    "\134\013\121\014\113\016\133\017\107\020\120\021\112" +
    "\027\223\032\116\063\uffc7\075\220\001\002\000\004\063" +
    "\u01ac\001\002\000\032\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\023\uffeb\024\uffeb\025\uffeb\031\uffeb\063" +
    "\uffeb\075\uffeb\001\002\000\010\056\u01ae\061\u010a\066\u010b" +
    "\001\002\000\022\006\066\007\070\010\071\011\076\012" +
    "\072\013\067\057\uff6a\075\073\001\002\000\004\057\u01b0" +
    "\001\002\000\004\062\u01b1\001\002\000\042\003\130\006" +
    "\105\007\122\010\124\011\106\012\134\013\121\014\113" +
    "\016\133\017\107\020\120\021\112\030\111\032\116\063" +
    "\uffdf\075\115\001\002\000\004\063\u01b3\001\002\000\032" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\023" +
    "\uffef\024\uffef\025\uffef\031\uffef\063\uffef\075\uffef\001\002" +
    "\000\010\056\u01b5\061\u0111\066\u0112\001\002\000\022\006" +
    "\066\007\070\010\071\011\076\012\072\013\067\057\uff6a" +
    "\075\073\001\002\000\004\057\u01b7\001\002\000\004\062" +
    "\u01b8\001\002\000\042\003\130\006\105\007\122\010\124" +
    "\011\106\012\134\013\121\014\113\016\133\017\107\020" +
    "\120\021\112\030\111\032\116\063\uffdf\075\115\001\002" +
    "\000\004\063\u01ba\001\002\000\032\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\023\uffec\024\uffec\025\uffec" +
    "\031\uffec\063\uffec\075\uffec\001\002\000\010\056\u01bc\061" +
    "\u018b\066\u018c\001\002\000\022\006\066\007\070\010\071" +
    "\011\076\012\072\013\067\057\uff6a\075\073\001\002\000" +
    "\004\057\u01be\001\002\000\004\062\u01bf\001\002\000\042" +
    "\003\130\006\105\007\122\010\124\011\106\012\134\013" +
    "\121\014\113\016\133\017\107\020\120\021\112\030\111" +
    "\032\116\063\uffdf\075\115\001\002\000\004\063\u01c1\001" +
    "\002\000\032\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\023\ufff0\024\ufff0\025\ufff0\031\ufff0\063\ufff0\075" +
    "\ufff0\001\002\000\032\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\023\ufff4\024\ufff4\025\ufff4\031\ufff4\063" +
    "\ufff4\075\ufff4\001\002\000\032\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\023\ufff3\024\ufff3\025\ufff3\031" +
    "\ufff3\063\ufff3\075\ufff3\001\002\000\004\002\001\001\002" +
    "\000\016\004\ufffd\005\ufffd\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c3\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\012\017\006\001\001" +
    "\000\004\020\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\031" +
    "\001\001\000\002\001\001\000\010\007\034\017\032\022" +
    "\033\001\001\000\020\012\040\024\051\025\042\026\053" +
    "\027\041\030\052\031\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\073\063\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\100\063\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\011\130\012\124\013\113\024\051" +
    "\025\042\026\053\027\041\030\052\031\036\032\131\036" +
    "\125\041\107\043\116\055\126\056\103\060\122\001\001" +
    "\000\042\011\130\012\124\013\113\024\051\025\042\026" +
    "\053\027\041\030\052\031\036\032\131\036\125\041\107" +
    "\043\116\055\126\056\103\060\u0190\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\011\130" +
    "\012\124\013\113\024\051\025\042\026\053\027\041\030" +
    "\052\031\036\032\131\036\125\041\107\043\116\055\126" +
    "\056\103\060\u0181\001\001\000\012\014\245\015\141\021" +
    "\251\023\u017d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\011\130\012\124\013\113\024\051\025\042\026\053" +
    "\027\041\030\052\031\036\032\131\036\125\041\107\043" +
    "\116\055\126\056\103\060\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\011\130\012\124" +
    "\013\113\024\051\025\042\026\053\027\041\030\052\031" +
    "\036\032\131\036\125\041\107\043\116\055\126\056\103" +
    "\060\376\001\001\000\042\011\130\012\124\013\113\024" +
    "\051\025\042\026\053\027\041\030\052\031\036\032\131" +
    "\036\125\041\107\043\116\055\126\056\103\060\375\001" +
    "\001\000\002\001\001\000\042\011\130\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\131\036\125\041\107\043\116\055\126\056\103\060\373" +
    "\001\001\000\042\011\130\012\124\013\113\024\051\025" +
    "\042\026\053\027\041\030\052\031\036\032\131\036\125" +
    "\041\107\043\116\055\126\056\103\060\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\141\021\145\001\001\000\006\015" +
    "\141\021\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\141\021\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\141\021\156" +
    "\001\001\000\006\015\141\021\155\001\001\000\002\001" +
    "\001\000\006\015\141\021\154\001\001\000\006\015\141" +
    "\021\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\173\001\001\000\010\015\141\021\204\034\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\010\215\011\224\012\124\013\113\024\051\025\042" +
    "\026\053\027\041\030\052\031\036\032\225\036\221\041" +
    "\216\043\220\055\223\056\214\001\001\000\042\010\354" +
    "\011\224\012\124\013\113\024\051\025\042\026\053\027" +
    "\041\030\052\031\036\032\225\036\221\041\216\043\220" +
    "\055\223\056\214\001\001\000\002\001\001\000\042\010" +
    "\352\011\224\012\124\013\113\024\051\025\042\026\053" +
    "\027\041\030\052\031\036\032\225\036\221\041\216\043" +
    "\220\055\223\056\214\001\001\000\002\001\001\000\042" +
    "\010\233\011\224\012\124\013\113\024\051\025\042\026" +
    "\053\027\041\030\052\031\036\032\225\036\221\041\216" +
    "\043\220\055\223\056\214\001\001\000\042\010\232\011" +
    "\224\012\124\013\113\024\051\025\042\026\053\027\041" +
    "\030\052\031\036\032\225\036\221\041\216\043\220\055" +
    "\223\056\214\001\001\000\002\001\001\000\042\010\230" +
    "\011\224\012\124\013\113\024\051\025\042\026\053\027" +
    "\041\030\052\031\036\032\225\036\221\041\216\043\220" +
    "\055\223\056\214\001\001\000\042\010\227\011\224\012" +
    "\124\013\113\024\051\025\042\026\053\027\041\030\052" +
    "\031\036\032\225\036\221\041\216\043\220\055\223\056" +
    "\214\001\001\000\042\010\226\011\224\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\225\036\221\041\216\043\220\055\223\056\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\245\015\141\021" +
    "\251\023\263\044\266\054\333\001\001\000\012\014\245" +
    "\015\141\021\251\023\250\001\001\000\002\001\001\000" +
    "\042\010\242\011\224\012\124\013\113\024\051\025\042" +
    "\026\053\027\041\030\052\031\036\032\225\036\221\041" +
    "\216\043\220\055\223\056\214\001\001\000\002\001\001" +
    "\000\004\045\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\245\015\141\021\251\023\263\044\266\054\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\245\015\141\021\251\023\263" +
    "\044\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\245\015\141\021\251\023\263\044\273\001\001" +
    "\000\002\001\001\000\014\015\301\046\306\047\303\052" +
    "\277\053\300\001\001\000\002\001\001\000\004\045\332" +
    "\001\001\000\004\051\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\322\001\001\000\004\045\321" +
    "\001\001\000\006\015\301\053\320\001\001\000\014\015" +
    "\301\046\306\047\316\052\277\053\300\001\001\000\004" +
    "\050\307\001\001\000\002\001\001\000\012\015\301\046" +
    "\314\052\277\053\300\001\001\000\012\015\301\046\312" +
    "\052\277\053\300\001\001\000\004\050\313\001\001\000" +
    "\002\001\001\000\004\050\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\301\052\330" +
    "\053\300\001\001\000\002\001\001\000\010\015\301\052" +
    "\326\053\300\001\001\000\004\051\327\001\001\000\002" +
    "\001\001\000\004\051\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\337\011\224\012\124\013\113\024" +
    "\051\025\042\026\053\027\041\030\052\031\036\032\225" +
    "\036\221\041\216\043\220\055\223\056\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\245\015\141\021\251\023\263\044\266\054\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\361\001\001\000\010\015\141\021\204" +
    "\034\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\010\370\011\224\012\124\013\113\024\051\025" +
    "\042\026\053\027\041\030\052\031\036\032\225\036\221" +
    "\041\216\043\220\055\223\056\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\010\u011a\011\224\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\225\036\221\041\216\043\220\055\223\056\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u011f\037\u0121\001\001\000\006\035\u012d\040\u012c" +
    "\001\001\000\004\040\u012a\001\001\000\006\014\u011f\037" +
    "\u0124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u0126\001\001\000" +
    "\006\014\u011f\037\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\u011f\037\u012b\001" +
    "\001\000\002\001\001\000\006\014\u011f\037\u0134\001\001" +
    "\000\012\014\245\015\141\021\251\023\u012e\001\001\000" +
    "\004\040\u0132\001\001\000\004\040\u0130\001\001\000\006" +
    "\014\u011f\037\u0131\001\001\000\002\001\001\000\006\014" +
    "\u011f\037\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\011\130\012\124\013" +
    "\113\024\051\025\042\026\053\027\041\030\052\031\036" +
    "\032\131\036\125\041\107\043\116\055\126\056\103\060" +
    "\u013e\001\001\000\002\001\001\000\042\011\130\012\124" +
    "\013\113\024\051\025\042\026\053\027\041\030\052\031" +
    "\036\032\131\036\125\041\107\043\116\055\126\056\103" +
    "\060\u0140\001\001\000\002\001\001\000\006\014\u011f\037" +
    "\u0142\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\011\u014d\012\124\013\113\024\051\025\042\026\053\027" +
    "\041\030\052\031\036\032\u014e\036\u014a\041\u0146\043\u0149" +
    "\055\u014c\056\u0145\062\u014f\001\001\000\042\011\u014d\012" +
    "\124\013\113\024\051\025\042\026\053\027\041\030\052" +
    "\031\036\032\u014e\036\u014a\041\u0146\043\u0149\055\u014c\056" +
    "\u0145\062\u0168\001\001\000\042\011\u014d\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\u014e\036\u014a\041\u0146\043\u0149\055\u014c\056\u0145\062\u0167" +
    "\001\001\000\012\014\245\015\141\021\251\023\u0163\001" +
    "\001\000\002\001\001\000\042\011\u014d\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\u014e\036\u014a\041\u0146\043\u0149\055\u014c\056\u0145\062\u015c" +
    "\001\001\000\042\011\u014d\012\124\013\113\024\051\025" +
    "\042\026\053\027\041\030\052\031\036\032\u014e\036\u014a" +
    "\041\u0146\043\u0149\055\u014c\056\u0145\062\u015b\001\001\000" +
    "\002\001\001\000\042\011\u014d\012\124\013\113\024\051" +
    "\025\042\026\053\027\041\030\052\031\036\032\u014e\036" +
    "\u014a\041\u0146\043\u0149\055\u014c\056\u0145\062\u0159\001\001" +
    "\000\042\011\u014d\012\124\013\113\024\051\025\042\026" +
    "\053\027\041\030\052\031\036\032\u014e\036\u014a\041\u0146" +
    "\043\u0149\055\u014c\056\u0145\062\u0158\001\001\000\042\011" +
    "\u014d\012\124\013\113\024\051\025\042\026\053\027\041" +
    "\030\052\031\036\032\u014e\036\u014a\041\u0146\043\u0149\055" +
    "\u014c\056\u0145\062\u0157\001\001\000\002\001\001\000\004" +
    "\042\u0151\001\001\000\002\001\001\000\004\041\u0153\001" +
    "\001\000\002\001\001\000\042\011\u014d\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\u014e\036\u014a\041\u0146\043\u0149\055\u014c\056\u0145\062\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\011\u014d\012\124\013\113\024\051" +
    "\025\042\026\053\027\041\030\052\031\036\032\u014e\036" +
    "\u014a\041\u0146\043\u0149\055\u014c\056\u0145\062\u0160\001\001" +
    "\000\002\001\001\000\042\011\u014d\012\124\013\113\024" +
    "\051\025\042\026\053\027\041\030\052\031\036\032\u014e" +
    "\036\u014a\041\u0146\043\u0149\055\u014c\056\u0145\062\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u016d\001\001\000\004\061\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\010\u0172\011\224\012\124\013\113\024\051\025" +
    "\042\026\053\027\041\030\052\031\036\032\225\036\221" +
    "\041\216\043\220\055\223\056\214\001\001\000\004\057" +
    "\u0173\001\001\000\002\001\001\000\042\010\u0175\011\224" +
    "\012\124\013\113\024\051\025\042\026\053\027\041\030" +
    "\052\031\036\032\225\036\221\041\216\043\220\055\223" +
    "\056\214\001\001\000\004\057\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\u017c\011\224\012\124\013" +
    "\113\024\051\025\042\026\053\027\041\030\052\031\036" +
    "\032\225\036\221\041\216\043\220\055\223\056\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u011f\037\u0183\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\u0186\011\224\012\124\013\113\024" +
    "\051\025\042\026\053\027\041\030\052\031\036\032\225" +
    "\036\221\041\216\043\220\055\223\056\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\141\021\u018d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0192\063" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\010\u0195\011\224\012\124\013\113\024\051\025\042\026" +
    "\053\027\041\030\052\031\036\032\225\036\221\041\216" +
    "\043\220\055\223\056\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\u0199\063\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\011" +
    "\130\012\124\013\113\024\051\025\042\026\053\027\041" +
    "\030\052\031\036\032\131\036\125\041\107\043\116\055" +
    "\126\056\103\060\u019c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\u01a0\063\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\011\130" +
    "\012\124\013\113\024\051\025\042\026\053\027\041\030" +
    "\052\031\036\032\131\036\125\041\107\043\116\055\126" +
    "\056\103\060\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u01a7\063\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\u01aa\011" +
    "\224\012\124\013\113\024\051\025\042\026\053\027\041" +
    "\030\052\031\036\032\225\036\221\041\216\043\220\055" +
    "\223\056\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u01ae\063\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\011\130\012\124" +
    "\013\113\024\051\025\042\026\053\027\041\030\052\031" +
    "\036\032\131\036\125\041\107\043\116\055\126\056\103" +
    "\060\u01b1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\u01b5\063\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\011\130\012\124\013" +
    "\113\024\051\025\042\026\053\027\041\030\052\031\036" +
    "\032\131\036\125\041\107\043\116\055\126\056\103\060" +
    "\u01b8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u01bc\063\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\011\130\012\124\013\113" +
    "\024\051\025\042\026\053\027\041\030\052\031\036\032" +
    "\131\036\125\041\107\043\116\055\126\056\103\060\u01bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Lista lista;;
    private int contadorVariable = 0;     
    private ArrayList<String> errores = new ArrayList<>();
    private String nombre_clase;

    public void setNombre_clase(String nombre_clase) {
        this.nombre_clase = nombre_clase;
    }

    public parser(LexerServidor lexer) {
            super(lexer);
    }

    public void setErrores(ArrayList<String> errores) {
        this.errores = errores;
    }
  
    public void syntax_error(Symbol s) {
        errores.add("Error Sintactico en: "+ nombre_clase + " | Lexema: " + String.valueOf(s.value) + " | Linea: " +  s.left + " | columna: " +  s.right);
    }

    public void setLista(Lista lista) {
        this.lista = lista;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= s_import clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s_import ::= s_import IMPORT ID id_import PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_import",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s_import ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_import",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s_import ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s_import",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // id_import ::= PUNTO ID id_import 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_import",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // id_import ::= PUNTO MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_import",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // id_import ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_import",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clase ::= visibilidad final CLASS ID LLAVE_A codigo LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.agregarClase(var);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigo ::= codigo metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigo ::= codigo visibilidad creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigo ::= codigo constructor 
            {
              Object RESULT =null;
		lista.reiniciarParametros(); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigo ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigo ::= error LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constructor ::= visibilidad ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"Constructor",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= visibilidad STRING ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias_metodos LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"String",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= visibilidad INT ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias_metodos LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"int",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= visibilidad BOOLEAN ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias_metodos LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"boolean",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodo ::= visibilidad CHAR ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias_metodos LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"char",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodo ::= visibilidad DOUBLE ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias_metodos LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"double",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodo ::= visibilidad OBJECT ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias_metodos LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"Object",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo ::= visibilidad VOID ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A sentencias LLAVE_C 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirMetodo(var,"void",contadorVariable); contadorVariable = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias_metodos ::= variable sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias_metodos ::= ciclo_for sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencias_metodos ::= ciclo_while sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencias_metodos ::= ciclo_do_while sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencias_metodos ::= sentencia_if sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencias_metodos ::= sentencia_switch sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencias_metodos ::= llamada sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencias_metodos ::= ID INCREMENTO PUNTO_COMA sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencias_metodos ::= ID DECREMENTO PUNTO_COMA sentencias_metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencias_metodos ::= RETURN resultado PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencias_metodos ::= RETURN ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencias_metodos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_metodos",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencias_if_else ::= variable sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencias_if_else ::= ciclo_for sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencias_if_else ::= ciclo_while sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias_if_else ::= ciclo_do_while sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencias_if_else ::= sentencia_if sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencias_if_else ::= sentencia_switch sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencias_if_else ::= llamada sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencias_if_else ::= ID INCREMENTO PUNTO_COMA sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencias_if_else ::= ID DECREMENTO PUNTO_COMA sentencias_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencias_if_else ::= RETURN resultado PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias_if_else ::= RETURN ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencias_if_else ::= BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencias_if_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_if_else",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencias ::= variable sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencias ::= ciclo_for sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= ciclo_while sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= ciclo_do_while sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= sentencia_if sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias ::= sentencia_switch sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencias ::= llamada sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencias ::= ID INCREMENTO PUNTO_COMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencias ::= ID DECREMENTO PUNTO_COMA sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencias ::= BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_switch ::= SWITCH PARENTESIS_A ID PARENTESIS_C LLAVE_A sentencia_case LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_switch ::= SWITCH PARENTESIS_A ID PARENTESIS_C LLAVE_A sentencia_case sentencia_default LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_switch",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_default ::= DEFAULT DOS_PUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_default",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_case ::= CASE ENTERO DOS_PUNTOS sentencias sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_case ::= CASE CADENA DOS_PUNTOS sentencias sentencia_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_case ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ciclo_do_while ::= DO LLAVE_A sentencias LLAVE_C WHILE PARENTESIS_A param_sentencia PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamada ::= ID PARENTESIS_A param_llamada PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // param_llamada ::= parametro_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_llamada",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // param_llamada ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_llamada",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametro_llamada ::= resultado COMA parametro_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametro_llamada ::= resultado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametro_llamada ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametro_llamada ::= ID COMA parametro_llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_if ::= IF PARENTESIS_A param_sentencia PARENTESIS_C LLAVE_A sentencias_if_else LLAVE_C sentencia_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_else ::= ELSE LLAVE_A sentencias_if_else LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_else ::= ELSE sentencia_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_else",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ciclo_while ::= WHILE PARENTESIS_A param_sentencia PARENTESIS_C LLAVE_A sentencias LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // param_sentencia ::= bandera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // param_sentencia ::= bandera logicos param_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // param_sentencia ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // param_sentencia ::= ID logicos param_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // param_sentencia ::= ID relacionales ID logicos param_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // param_sentencia ::= ID relacionales ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // param_sentencia ::= ID relacionales resultado logicos param_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // param_sentencia ::= ID relacionales resultado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // param_sentencia ::= PARENTESIS_A param_sentencia PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // param_sentencia ::= PARENTESIS_A param_sentencia PARENTESIS_C logicos param_sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_sentencia",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ciclo_for ::= FOR PARENTESIS_A INT ID SIGNO_IGUAL ENTERO PUNTO_COMA ID relacionales valor PUNTO_COMA ID aumento PARENTESIS_C LLAVE_A sentencias LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ciclo_for ::= FOR PARENTESIS_A ID SIGNO_IGUAL ENTERO PUNTO_COMA ID relacionales valor PUNTO_COMA ID aumento PARENTESIS_C LLAVE_A sentencias LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // aumento ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aumento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // aumento ::= DECREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aumento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // logicos ::= LOGICO_Y 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // logicos ::= LOGICO_O 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // relacionales ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // relacionales ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // relacionales ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relacionales ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relacionales ::= LOGICO_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relacionales ::= LOGICO_DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= creacion 
            {
              Object RESULT =null;
		contadorVariable++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // creacion ::= var_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // creacion ::= var_double 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // creacion ::= var_string 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // creacion ::= var_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // creacion ::= var_boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // creacion ::= var_object 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // var_int ::= INT ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var, "int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_int",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // var_int ::= INT ID SIGNO_IGUAL expresion PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_int",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // var_int ::= INT ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_int",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // var_double ::= DOUBLE ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var, "double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_double",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // var_double ::= DOUBLE ID SIGNO_IGUAL expresion PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_double",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // var_double ::= DOUBLE ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_double",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // var_string ::= STRING ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var, "String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_string",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // var_string ::= STRING ID SIGNO_IGUAL CADENA c PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		lista.añadirDatosVariable(var, "String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_string",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // var_string ::= STRING ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_string",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // var_char ::= CHAR ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var, "char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_char",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // var_char ::= CHAR ID SIGNO_IGUAL LETRA PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_char",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // var_char ::= CHAR ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_char",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // var_boolean ::= BOOLEAN ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var, "boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_boolean",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // var_boolean ::= BOOLEAN ID SIGNO_IGUAL bandera PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_boolean",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // var_boolean ::= BOOLEAN ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_boolean",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // var_object ::= OBJECT ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var, "Object");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_object",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // var_object ::= OBJECT ID SIGNO_IGUAL NEW OBJECT PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		lista.añadirDatosVariable(var, "Object");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_object",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // var_object ::= OBJECT ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var, "Object");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_object",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // var_object ::= ID ID PUNTO_COMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista.añadirDatosVariable(var2, var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_object",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // var_object ::= ID ID SIGNO_IGUAL NEW ID PARENTESIS_A param_llamada PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		lista.añadirDatosVariable(var2, var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_object",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // var_object ::= ID ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		lista.añadirDatosVariable(var2, var1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_object",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignacion ::= ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignacion ::= ID SIGNO_IGUAL resultado PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // asignacion ::= THIS PUNTO ID SIGNO_IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // resultado ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // resultado ::= CADENA c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // resultado ::= LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // resultado ::= bandera 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // resultado ::= NEW OBJECT PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // resultado ::= NEW ID PARENTESIS_A param_llamada PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("resultado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // c ::= SUMA CADENA c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // c ::= SUMA x c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // c ::= SUMA ID c 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // c ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bandera ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bandera",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // bandera ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bandera",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // numero ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametros ::= tipo_parametro ID COMA parametros 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		lista.añadirParametro(var,tipo); contadorVariable++; lista.añadirDatosVariable(var, tipo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametros ::= tipo_parametro ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.añadirParametro(var,tipo); contadorVariable++; lista.añadirDatosVariable(var, tipo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tipo_parametro ::= INT 
            {
              String RESULT =null;
		RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tipo_parametro ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipo_parametro ::= STRING 
            {
              String RESULT =null;
		RESULT = "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipo_parametro ::= CHAR 
            {
              String RESULT =null;
		RESULT = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_parametro ::= DOUBLE 
            {
              String RESULT =null;
		RESULT = "double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_parametro ::= OBJECT 
            {
              String RESULT =null;
		RESULT = "Object";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_parametro ::= ID 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_parametro",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // visibilidad ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // visibilidad ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // visibilidad ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // visibilidad ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // final ::= FINAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // final ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // x ::= t x_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // x_prima ::= SUMA t x_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_prima",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // x_prima ::= RESTA t x_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_prima",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // x_prima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("x_prima",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // t ::= p t_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // t_prima ::= MULTIPLICACION p t_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_prima",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // t_prima ::= DIVISION p t_prima 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_prima",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // t_prima ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_prima",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // p ::= RESTA e 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // p ::= e 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // e ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // e ::= PARENTESIS_A x PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expresion ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expresion ::= expresion SUMA expresion 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expresion ::= expresion RESTA expresion 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expresion ::= expresion DIVISION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expresion ::= RESTA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expresion ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
